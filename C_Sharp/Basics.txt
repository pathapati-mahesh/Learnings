Date :27/10/2024
Topics
1.C# vs .NET 
2.CLR
3.Architecture of .NET 

----> In 3 Ways we can run the c# Application (only if you are in the dll file generated path)
	example :"AddApp\bin\Debug\net8.0"
	1. Using the exe file
	2. Using the .dll file --->Command to run the dll file is -->dotnet file.dll
	3. By Using the Project file
1.	C# Vs .NET:
-----------------------

--->C# is a Programming Language and Dot net is a Framework to build the window applications.
--->.Net Frame is not Limited to   C# it is used my other programming Languages as well
--->.NET has two components 1.CLR(Common Language Runtime)
							2.Class Library

2. CLR (Common Language Runtime):
----------------------
--->The Common Language Runtime (CLR) is a core component of the Microsoft .NET Framework that manages
the execution of .NET applications.
--->It provides a managed execution environment for code written in various .NET programming languages,
including C#, VB.NET, and F#.

--->When we compile the Code in C# it will be converted in to the IL(INTERMEDIATE LANGUAGE) Code and 
then The IL code is Converted in to the Machine code

--->.The above process is called JIT(Just intime compilation). Moreover this entire process is Handled 
by CLR.

3.DLL(Dynamic linked Library)
-----------------------------------
---> ??


4. Name space is Useful to differentiate the application code and also while importing we have to use the Name space
if we have 2 classes with the same name but with a different Name space we can be able to import both the same clases
from different name space.

5. static void Main(string[] args)----> In this Void is the return time means it wont return anything.

6. Every Class has Properties and Objects it means --->properties and  Methods.

7. An assembly in C# is a fundamental building block of .NET applications.
	It is a compiled code library used for deployment, versioning, and security. 
	Assemblies can be in the form of executable (.exe) files or dynamic link library (.dll) files

8.An assembly is a file (DLL or EXE) that contains one or more namespaces and classes. 
	An EXE file represents a program that can be executed. 
	A DLL is a file that includes code that can be re-used across different programs.


--------------------------------------------------------------------------------------------------------------
Day2 
Date : 30-10-2024

														Concepts
														********
								1.Datatypes --->Primitive Types and Non Primitive Types(string, array, class, enum)
								2.Type conversion
								3.Operators
								4.what is Scope
								5.Overflowing
--------------------------------------------------------------------------------------------------------------

1. Primitve Types	:
-----------------
	i)	Variables is a container to store the values inside it. Or a Name given to a Storage location in our Memory.
	ii) Constants is a Immutable Value which we cannot change once we set the value to it. Example : Pi=3.14

	Declaring the variables:
	------------------------
	--->int VariableName;

	--->Assigning Value to the Variable
			int Number=1;
			string name="Master";
			char name='M';
	---> Declaring a Constant variable
		const float referenceNumber=3.14f;

	--->Identifier/Variable Name cannot start with a Number. 
	--->It should not have space in between. 
	--->We are not allowed to use the Key Words
		
		Example: int 1number;(X way) (or) int One Number; (or) string int;
				int oneNumber;
	--->There are different type of Naming Conventions
		1. Camel Case			----> Example : firstName	(Commonly Used Naming convention)
		2. Pascal Case			----> Example : FirstName	(			'''					)	
		3. Hungarian Notation	----> Example :	newFirstName	(Not Prefered to Use this)


	Primitive Types In C#:
	---------------------
	1. Integral Numbers

		byte	---> Byte(.Net Type),  Bytes : 1, Range	: 0 to 255
		short	---> Int16(.Net Type), Bytes : 2, Range	: -32,768 to 32767
		int		---> Int32(.Net Type), Bytes : 4, Range : -2.1 B to 2.1B
		long	---> Int64(.Net Type), Bytes : 8, Range : ...

	2. Real Numbers

		float		--->Single(.Net Type), Bytes : 4 , Range : -3.4*10**38 to 3.4* 10**38
		double		--->Double(.Net Type), Bytes : 8 , Range : -3.4*10**38 to 3.4* 10**38
		decimal		--->Decimal(.Net Type),Bytes : 16 , Range : -7.9*10**28 to 7.9* 10**28

	3. Characters

		char	--->char(.Net Type), Bytes : 2 , Range : Unicode Characters

	4. Boolean Type

		bool	---> Boolean(.Net Type), Bytes : 1, Range: True/False



Note:
	--->While declaring the float, double and decimal Numbers we have to explicitly tell the compiler that we are 
	declaring so on so type

	--->if we declaring the float type then at the end of the digit we have to suffix the Number with 'f'
	and for the decimal we have to suffix it with the 'm'. If we dont assign the suffix to it then the compiler will think it 
	as a double type. By default it will consider it as double Number.


OVER FLOWING:
------------
	---> Overflow in C# occurs when the result of an arithmetic operation exceeds the maximum or minimum value
		that can be represented by the data type involved in the calculation. 
	--->In other words, overflow happens when a value cannot be represented within the range of its data type.

	For example :
				int maxInt = int.MaxValue;
				int overflowedValue = maxInt + 1;